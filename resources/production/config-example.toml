# ================================
# Configuration options for a node
# ================================
[node]

# If set, use this hash as a trust anchor when joining an existing network.
#trusted_hash = 'HEX-FORMATTED BLOCK HASH'


# =================================
# Configuration options for logging
# =================================
[logging]

# Output format.  Possible values are 'text' or 'json'.
format = 'json'

# Colored output.  Has no effect if format = 'json'.
color = false

# Abbreviate module names in text output.  Has no effect if format = 'json'.
abbreviate_modules = false


# ===================================
# Configuration options for consensus
# ===================================
[consensus]

# Path (absolute, or relative to this config.toml) to validator's secret key file used to sign
# consensus messages.
secret_key_path = '/etc/casper/validator_keys/secret_key.pem'

# The folder in which the files with per-era latest unit hashes will be stored.
unit_hashes_folder = "/var/lib/casper/casper-node"

# The duration for which incoming vertices with missing dependencies should be kept in a queue.
pending_vertex_timeout = '1min'

request_latest_state_timeout = '30sec'

# The maximum number of blocks by which execution is allowed to lag behind finalization.
# If it is more than that, consensus will pause, and resume once the executor has caught up.
max_execution_delay = 3


# ====================================
# Configuration options for networking
# ====================================
[network]

# The public address of the node.
#
# It must be publicly available in order to allow peers to connect to this node.
# If the port is set to 0, the actual bound port will be substituted.
public_address = '<IP ADDRESS>:0'

# Address to bind to for listening.
# If port is set to 0, a random port will be used.
bind_address = '0.0.0.0:35000'

# Addresses to connect to in order to join the network.
#
# If not set, this node will not be able to attempt to connect to the network.  Instead it will
# depend upon peers connecting to it.  This is normally only useful for the first node of the
# network.
#
# Multiple addresses can be given and the node will attempt to connect to each, requiring at least
# one connection.
known_addresses = ['134.122.14.111:35000', '54.146.160.57:35000', '35.192.213.171:35000', '35.233.165.80:35000', '135.181.192.149:35000', '34.123.40.20:35000', '95.217.227.245:35000', '95.217.203.156:35000', '95.217.196.20:35000', '95.217.2.40:35000', '95.217.193.34:35000', '135.181.158.218:35000', '78.47.10.119:35000', '35.239.228.18:35000', '135.181.89.76:35000', '168.119.59.12:35000', '157.90.26.198:35000', '161.97.136.153:35000', '116.203.214.160:35000', '195.201.148.78:35000', '168.119.49.220:35000', '78.47.9.189:35000', '116.202.17.49:35000', '116.202.24.91:35000', '168.119.123.213:35000', '78.46.198.83:35000', '159.69.218.20:35000', '135.181.40.95:35000', '116.203.182.37:35000', '207.180.243.57:35000', '78.46.186.163:35000', '78.47.131.222:35000', '78.47.14.48:35000', '95.217.193.36:35000', '207.180.199.157:35000', '144.91.83.59:35000', '107.22.247.79:35000', '95.216.202.98:35000', '37.221.196.53:35000', '95.216.215.119:35000', '195.201.225.135:35000', '47.91.18.226:35000', '207.180.200.65:35000', '168.119.165.44:35000', '135.181.97.186:35000', '168.119.177.37:35000', '62.171.138.114:35000', '178.33.239.236:35000', '135.181.36.98:35000', '167.86.75.50:35000', '45.61.52.142:35000', '161.97.124.55:35000', '168.119.98.214:35000', '134.209.16.172:35000', '35.236.56.221:35000', '31.7.207.16:35000', '54.183.27.75:35000', '18.144.176.168:35000', '13.57.200.251:35000']

# The interval (in milliseconds) between each fresh round of gossiping the node's public address.
gossip_interval = 120_000

# Enable systemd support. If enabled, the node will notify systemd once it has synced and its
# listening socket for incoming connections is open.
#
# It is usually better to leave this option off and enable it explicitly via command-line override
# only in the unit files themselves via `-C=network.systemd_support=true`.
systemd_support = false

# Minimum amount of time that has to pass before attempting to reconnect after losing all
# connections to established nodes.
isolation_reconnect_delay = '2s'

# Initial delay for starting address gossipping after the network starts. This should be slightly
# more than the expected time required for initial connections to complete.
initial_gossip_delay = '5s'

# How long a connection is allowed to be stuck as pending before it is abandoned.
max_addr_pending_time = '1min'


# ==================================================
# Configuration options for the JSON-RPC HTTP server
# ==================================================
[rpc_server]

# Listening address for JSON-RPC HTTP server.  If the port is set to 0, a random port will be used.
#
# If the specified port cannot be bound to, a random port will be tried instead.  If binding fails,
# the JSON-RPC HTTP server will not run, but the node will be otherwise unaffected.
#
# The actual bound address will be reported via a log line if logging is enabled.
address = '0.0.0.0:7777'

# The global max rate of requests (per second) before they are limited.
# Request will be delayed to the next 1 second bucket once limited.
qps_limit = 50


# ==============================================
# Configuration options for the REST HTTP server
# ==============================================
[rest_server]

# Listening address for REST HTTP server.  If the port is set to 0, a random port will be used.
#
# If the specified port cannot be bound to, a random port will be tried instead.  If binding fails,
# the REST HTTP server will not run, but the node will be otherwise unaffected.
#
# The actual bound address will be reported via a log line if logging is enabled.
address = '0.0.0.0:8888'

# The global max rate of requests (per second) before they are limited.
# Request will be delayed to the next 1 second bucket once limited.
qps_limit = 10


# ==========================================================
# Configuration options for the SSE HTTP event stream server
# ==========================================================
[event_stream_server]

# Listening address for SSE HTTP event stream server.  If the port is set to 0, a random port will be used.
#
# If the specified port cannot be bound to, a random port will be tried instead.  If binding fails,
# the SSE HTTP event stream server will not run, but the node will be otherwise unaffected.
#
# The actual bound address will be reported via a log line if logging is enabled.
address = '0.0.0.0:9999'

# The number of event stream events to buffer.
event_stream_buffer_length = 100

# The capacity of the broadcast channel size.
broadcast_channel_size = 100

# The global max rate of requests (per second) before they are limited.
# Request will be delayed to the next 1 second bucket once limited.
qps_limit = 10


# ===============================================
# Configuration options for the storage component
# ===============================================
[storage]

# Path (absolute, or relative to this config.toml) to the folder where any files created
# or read by the storage component will exist.
#
# If the folder doesn't exist, it and any required parents will be created.
#
# If unset, the path must be supplied as an argument via the CLI.
path = '/var/lib/casper/casper-node'

# Maximum size of the database to use for the block store.
#
# The size should be a multiple of the OS page size.
#
# 483_183_820_800 == 450 GiB.
max_block_store_size = 483_183_820_800

# Maximum size of the database to use for the deploy store.
#
# The size should be a multiple of the OS page size.
#
# 322_122_547_200 == 300 GiB.
max_deploy_store_size = 322_122_547_200

# Maximum size of the database to use for the deploy metadata.
#
# The size should be a multiple of the OS page size.
#
# 322_122_547_200 == 300 GiB.
max_deploy_metadata_store_size = 322_122_547_200

# Maximum size of the database to use for the state snapshots.
#
# The size should be a multiple of the OS page size.
#
# 10_737_418_240 == 10 GiB.
max_state_store_size = 10_737_418_240


# ===================================
# Configuration options for gossiping
# ===================================
[gossip]

# Target number of peers to infect with a given piece of data.
infection_target = 3

# The saturation limit as a percentage, with a maximum value of 99.  Used as a termination
# condition.
#
# Example: assume the `infection_target` is 3, the `saturation_limit_percent` is 80, and we don't
# manage to newly infect 3 peers.  We will stop gossiping once we know of more than 15 holders
# excluding us since 80% saturation would imply 3 new infections in 15 peers.
saturation_limit_percent = 80

# The maximum duration in seconds for which to keep finished entries.
#
# The longer they are retained, the lower the likelihood of re-gossiping a piece of data.  However,
# the longer they are retained, the larger the list of finished entries can grow.
finished_entry_duration_secs = 60

# The timeout duration in seconds for a single gossip request, i.e. for a single gossip message
# sent from this node, it will be considered timed out if the expected response from that peer is
# not received within this specified duration.
gossip_request_timeout_secs = 30

# The timeout duration in seconds for retrieving the remaining part(s) of newly-discovered data
# from a peer which gossiped information about that data to this node.
get_remainder_timeout_secs = 5


# =================================
# Configuration options for fetcher
# =================================
[fetcher]

# The timeout duration in seconds for a single fetcher request, i.e. for a single fetcher message
# sent from this node to another node, it will be considered timed out if the expected response from that peer is
# not received within this specified duration.
get_from_peer_timeout = 3


# ===================================================
# Configuration options for deploy acceptor component
# ===================================================
[deploy_acceptor]

# If true, the deploy acceptor will verify the account associated with a received deploy prior to accepting it.
verify_accounts = true


# ========================================================
# Configuration options for the contract runtime component
# ========================================================
[contract_runtime]
# Optional setting to enable bonding or not.  If unset, defaults to false.
#enable_bonding = false

# Optional maximum size of the database to use for the global state store.
#
# If unset, defaults to 805,306,368,000 == 750 GiB.
#
# The size should be a multiple of the OS page size.
#max_global_state_size = 805306368000
